// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types/ledger_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

/// Even though we don't always need all hashes, we pass them in and return them
/// always so that we keep them in sync on the client and don't make the client
/// worry about which one(s) to pass in which cases
///
/// This structure serves a dual purpose.
///
/// First, if this structure is signed by 2f+1 validators it signifies the state
/// of the ledger at version `version` -- it contains the transaction
/// accumulator at that version which commits to all historical transactions.
/// This structure may be expanded to include other information that is derived
/// from that accumulator (e.g. the current time according to the time contract)
/// to reduce the number of proofs a client must get.
///
/// Second, the structure contains a `consensus_data_hash` value. This is the
/// hash of an internal data structure that represents a block that is voted on
/// by consensus.
///
/// Combining these two concepts when the consensus algorithm votes on a block B
/// it votes for a LedgerInfo with the `version` being the latest version that
/// will be committed if B gets 2f+1 votes. It sets `consensus_data_hash` to
/// represent B so that if those 2f+1 votes are gathered, the block is valid to
/// commit
type LedgerInfo struct {
	// Current latest version of the system
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Root hash of transaction accumulator at this version
	TransactionAccumulatorHash []byte `protobuf:"bytes,2,opt,name=transaction_accumulator_hash,json=transactionAccumulatorHash,proto3" json:"transaction_accumulator_hash,omitempty"`
	// Hash of consensus-specific data that is opaque to all parts of the system
	// other than consensus.  This is needed to verify signatures because
	// consensus signing includes this hash
	ConsensusDataHash []byte `protobuf:"bytes,3,opt,name=consensus_data_hash,json=consensusDataHash,proto3" json:"consensus_data_hash,omitempty"`
	// The block id of the last committed block corresponding to this ledger info.
	// This field is not particularly interesting to the clients, but can be used
	// by the validators for synchronization.
	ConsensusBlockId []byte `protobuf:"bytes,4,opt,name=consensus_block_id,json=consensusBlockId,proto3" json:"consensus_block_id,omitempty"`
	// Epoch number corresponds to the set of validators that are active for this
	// ledger info. The main motivation for keeping the epoch number in the
	// LedgerInfo is to ensure that the client has enough information to verify
	// that the signatures for this info are coming from the validators that
	// indeed form a quorum. Without epoch number a potential attack could reuse
	// the signatures from the validators in one epoch in order to sign the wrong
	// info belonging to another epoch, in which these validators do not form a
	// quorum. The very first epoch number is 0.
	EpochNum uint64 `protobuf:"varint,5,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
	// Timestamp that represents the microseconds since the epoch (unix time) that is
	// generated by the proposer of the block.  This is strictly increasing with every block.
	// If a client reads a timestamp > the one they specified for transaction expiration time,
	// they can be certain that their transaction will never be included in a block in the future
	// (assuming that their transaction has not yet been included)
	TimestampUsecs       uint64   `protobuf:"varint,6,opt,name=timestamp_usecs,json=timestampUsecs,proto3" json:"timestamp_usecs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LedgerInfo) Reset()         { *m = LedgerInfo{} }
func (m *LedgerInfo) String() string { return proto.CompactTextString(m) }
func (*LedgerInfo) ProtoMessage()    {}
func (*LedgerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2fafc85dbd06915, []int{0}
}

func (m *LedgerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LedgerInfo.Unmarshal(m, b)
}
func (m *LedgerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LedgerInfo.Marshal(b, m, deterministic)
}
func (m *LedgerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerInfo.Merge(m, src)
}
func (m *LedgerInfo) XXX_Size() int {
	return xxx_messageInfo_LedgerInfo.Size(m)
}
func (m *LedgerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerInfo proto.InternalMessageInfo

func (m *LedgerInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LedgerInfo) GetTransactionAccumulatorHash() []byte {
	if m != nil {
		return m.TransactionAccumulatorHash
	}
	return nil
}

func (m *LedgerInfo) GetConsensusDataHash() []byte {
	if m != nil {
		return m.ConsensusDataHash
	}
	return nil
}

func (m *LedgerInfo) GetConsensusBlockId() []byte {
	if m != nil {
		return m.ConsensusBlockId
	}
	return nil
}

func (m *LedgerInfo) GetEpochNum() uint64 {
	if m != nil {
		return m.EpochNum
	}
	return 0
}

func (m *LedgerInfo) GetTimestampUsecs() uint64 {
	if m != nil {
		return m.TimestampUsecs
	}
	return 0
}

/// The validator node returns this structure which includes signatures
/// from each validator to confirm the state.  The client needs to only pass
/// back the LedgerInfo element since the validator node doesn't need to know
/// the signatures again when the client performs a query, those are only there
/// for the client to be able to verify the state
type LedgerInfoWithSignatures struct {
	// Signatures of the root node from each validator
	Signatures           []*ValidatorSignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	LedgerInfo           *LedgerInfo           `protobuf:"bytes,2,opt,name=ledger_info,json=ledgerInfo,proto3" json:"ledger_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LedgerInfoWithSignatures) Reset()         { *m = LedgerInfoWithSignatures{} }
func (m *LedgerInfoWithSignatures) String() string { return proto.CompactTextString(m) }
func (*LedgerInfoWithSignatures) ProtoMessage()    {}
func (*LedgerInfoWithSignatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2fafc85dbd06915, []int{1}
}

func (m *LedgerInfoWithSignatures) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LedgerInfoWithSignatures.Unmarshal(m, b)
}
func (m *LedgerInfoWithSignatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LedgerInfoWithSignatures.Marshal(b, m, deterministic)
}
func (m *LedgerInfoWithSignatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerInfoWithSignatures.Merge(m, src)
}
func (m *LedgerInfoWithSignatures) XXX_Size() int {
	return xxx_messageInfo_LedgerInfoWithSignatures.Size(m)
}
func (m *LedgerInfoWithSignatures) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerInfoWithSignatures.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerInfoWithSignatures proto.InternalMessageInfo

func (m *LedgerInfoWithSignatures) GetSignatures() []*ValidatorSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *LedgerInfoWithSignatures) GetLedgerInfo() *LedgerInfo {
	if m != nil {
		return m.LedgerInfo
	}
	return nil
}

type ValidatorSignature struct {
	// The account address of the validator, which can be used for retrieving its
	// public key during the given epoch.
	ValidatorId          []byte   `protobuf:"bytes,1,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidatorSignature) Reset()         { *m = ValidatorSignature{} }
func (m *ValidatorSignature) String() string { return proto.CompactTextString(m) }
func (*ValidatorSignature) ProtoMessage()    {}
func (*ValidatorSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2fafc85dbd06915, []int{2}
}

func (m *ValidatorSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidatorSignature.Unmarshal(m, b)
}
func (m *ValidatorSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidatorSignature.Marshal(b, m, deterministic)
}
func (m *ValidatorSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSignature.Merge(m, src)
}
func (m *ValidatorSignature) XXX_Size() int {
	return xxx_messageInfo_ValidatorSignature.Size(m)
}
func (m *ValidatorSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSignature.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSignature proto.InternalMessageInfo

func (m *ValidatorSignature) GetValidatorId() []byte {
	if m != nil {
		return m.ValidatorId
	}
	return nil
}

func (m *ValidatorSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*LedgerInfo)(nil), "types.LedgerInfo")
	proto.RegisterType((*LedgerInfoWithSignatures)(nil), "types.LedgerInfoWithSignatures")
	proto.RegisterType((*ValidatorSignature)(nil), "types.ValidatorSignature")
}

func init() { proto.RegisterFile("types/ledger_info.proto", fileDescriptor_e2fafc85dbd06915) }

var fileDescriptor_e2fafc85dbd06915 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x92, 0x3d, 0xcf, 0xd3, 0x30,
	0x14, 0x85, 0x95, 0x7e, 0x41, 0x6f, 0x2a, 0xa0, 0x66, 0x20, 0x40, 0x07, 0xe8, 0x42, 0x07, 0x9a,
	0xa0, 0x32, 0xb1, 0x41, 0xc5, 0x40, 0x25, 0xc4, 0x10, 0x54, 0x90, 0x58, 0x22, 0xc7, 0x31, 0x89,
	0x55, 0x27, 0xb6, 0xfc, 0x51, 0x89, 0x9f, 0x80, 0xc4, 0x8f, 0xc6, 0xf1, 0xdb, 0x3a, 0x95, 0xde,
	0x2d, 0xf7, 0x9c, 0xe7, 0xc6, 0xbe, 0xe7, 0x1a, 0x9e, 0x99, 0x3f, 0x92, 0xea, 0x8c, 0xd3, 0xaa,
	0xa6, 0xaa, 0x60, 0xdd, 0x6f, 0x91, 0x4a, 0x25, 0x8c, 0x40, 0x53, 0x6f, 0xac, 0xff, 0x8d, 0x00,
	0xbe, 0x7a, 0xf3, 0xe0, 0x3c, 0x94, 0xc0, 0x83, 0x33, 0x55, 0x9a, 0x89, 0x2e, 0x89, 0x5e, 0x45,
	0x9b, 0x49, 0x7e, 0x2d, 0xd1, 0x47, 0x58, 0x19, 0x85, 0x3b, 0x8d, 0x89, 0x71, 0x65, 0x81, 0x09,
	0xb1, 0xad, 0xe5, 0xd8, 0x08, 0x55, 0x34, 0x58, 0x37, 0xc9, 0xc8, 0xe1, 0x8b, 0xfc, 0xc5, 0x0d,
	0xf3, 0x69, 0x40, 0xbe, 0x38, 0x02, 0xa5, 0xf0, 0x94, 0x88, 0x4e, 0xd3, 0x4e, 0x5b, 0x5d, 0x54,
	0xd8, 0xe0, 0xbb, 0xc6, 0xb1, 0x6f, 0x5c, 0x06, 0xeb, 0xb3, 0x73, 0x3c, 0xff, 0x16, 0xd0, 0xc0,
	0x97, 0x5c, 0x90, 0x53, 0xc1, 0xaa, 0x64, 0xe2, 0xf1, 0x27, 0xc1, 0xd9, 0xf7, 0xc6, 0xa1, 0x42,
	0x2f, 0x61, 0x4e, 0xa5, 0x20, 0x4d, 0xd1, 0xd9, 0x36, 0x99, 0xfa, 0xbb, 0x3f, 0xf4, 0xc2, 0x37,
	0xdb, 0xa2, 0x37, 0xf0, 0xd8, 0xb0, 0x96, 0x6a, 0x83, 0x5b, 0x59, 0x58, 0x4d, 0x89, 0x4e, 0x66,
	0x1e, 0x79, 0x14, 0xe4, 0x63, 0xaf, 0xae, 0xff, 0x46, 0x90, 0x0c, 0x71, 0xfc, 0x64, 0xa6, 0xf9,
	0xce, 0xea, 0x0e, 0x1b, 0xab, 0xa8, 0x46, 0x1f, 0x00, 0x74, 0xa8, 0x5c, 0x3e, 0xe3, 0x4d, 0xbc,
	0x7b, 0x9e, 0xfa, 0x1c, 0xd3, 0x1f, 0x98, 0xb3, 0xaa, 0x1f, 0x35, 0xf0, 0xf9, 0x0d, 0x8c, 0x76,
	0x10, 0xdf, 0xac, 0xc0, 0x87, 0x15, 0xef, 0x96, 0x97, 0xde, 0xe1, 0xc0, 0x1c, 0x78, 0xf8, 0x5e,
	0x1f, 0x01, 0xdd, 0xff, 0x2b, 0x7a, 0x0d, 0x8b, 0xf3, 0x55, 0xed, 0xf3, 0x88, 0x7c, 0x1e, 0x71,
	0xd0, 0x5c, 0x14, 0x2b, 0x98, 0x87, 0xa3, 0x2f, 0x7b, 0x19, 0x84, 0xfd, 0xbb, 0x5f, 0x69, 0xed,
	0xe6, 0xb2, 0x65, 0x4a, 0x44, 0x9b, 0xc9, 0x86, 0x71, 0x26, 0x65, 0xcd, 0x38, 0xa7, 0x19, 0x67,
	0xa5, 0xc2, 0x5b, 0x5d, 0x9d, 0xb6, 0xb5, 0xc8, 0x94, 0x24, 0x99, 0xbf, 0x5f, 0x39, 0xf3, 0x2f,
	0xe6, 0xfd, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0xe0, 0x0d, 0xb2, 0x4c, 0x02, 0x00, 0x00,
}
